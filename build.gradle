//plugins {
//    id 'java'
//    id 'org.springframework.boot' version '3.5.6'
//    id 'io.spring.dependency-management' version '1.1.7'
//}
//
//group = 'com.example'
//version = '0.0.1-SNAPSHOT'
//description = 'User-Service'
//
//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
//}
//
//configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//}
//
//repositories {
//    mavenCentral()
//}
//
//dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'org.postgresql:postgresql'
//    annotationProcessor 'org.projectlombok:lombok'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
//    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//
//    implementation 'org.flywaydb:flyway-database-postgresql'
//    implementation 'org.flywaydb:flyway-core:latest.release'
//
//
//    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
//
//
//    // test
//
////    testImplementation 'org.mockito:mockito-core'
////    testImplementation 'org.mockito:mockito-junit-jupiter'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//
//}
//
//tasks.named('test') {
//    useJUnitPlatform()
//}

// updates version

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'User-Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.flywaydb:flyway-core:latest.release'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.h2database:h2'
}

// Test configuration
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    timeout = Duration.ofMinutes(5)
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    minHeapSize = "256m"
    maxHeapSize = "1g"
    jvmArgs = ['-XX:MaxMetaspaceSize=256m','-XX:+UseG1GC','-Djava.awt.headless=true']

    reports {
        junitXml.required = true
        html.required = true
    }

    testLogging {
        events "started", "passed", "skipped", "failed"
        exceptionFormat "short"
        showStackTraces = true
    }

    systemProperties = [
            'spring.profiles.active': 'test',
            'logging.level.org.springframework.security': 'WARN',
            'logging.level.org.flywaydb': 'WARN',
            'spring.test.context.cache.maxSize': '1'
    ]
}

// Jacoco configuration
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
    }
}

// Coverage verification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.30
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }
            excludes = [
                    'com.example.userservice.security.jwt.*',
                    'com.example.userservice.configuration.*',
                    'com.example.userservice.*Application',
                    'com.example.userservice.config.*'
            ]
        }
    }
}

// SonarCloud configuration
sonarqube {
    properties {
        property "sonar.projectKey", "user-service"
        property "sonar.projectName", "User Service"
        property "sonar.organization", "godfrey10"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", System.getProperty("sonar.token") ?: System.getenv("SONAR_TOKEN")
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.source", "17"
        property "sonar.java.target", "17"
        property "sonar.qualitygate.wait", "true"
    }
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform { includeTags 'integration' }
    reports { junitXml.required = true; html.required = true }
    finalizedBy jacocoTestReport
}

// Quality check
task qualityCheck {
    description = 'Runs all quality checks'
    group = 'verification'
    dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
}

task fastBuild {
    description = 'Fast build for development - skips tests'
    group = 'build'
    dependsOn compileJava, compileTestJava, bootJar
}

task buildWithTests {
    description = 'Build with tests but without strict coverage verification'
    group = 'build'
    dependsOn compileJava, test, bootJar
}

task coverageReport {
    description = 'Generate coverage report without verification'
    group = 'reporting'
    dependsOn test
    doLast { tasks.jacocoTestReport.execute() }
}

check.dependsOn integrationTest
tasks.sonar.mustRunAfter test, jacocoTestReport
