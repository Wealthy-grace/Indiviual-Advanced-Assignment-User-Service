//plugins {
//    id 'java'
//    id 'org.springframework.boot' version '3.5.6'
//    id 'io.spring.dependency-management' version '1.1.7'
//}
//
//group = 'com.example'
//version = '0.0.1-SNAPSHOT'
//description = 'User-Service'
//
//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
//}
//
//configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//}
//
//repositories {
//    mavenCentral()
//}
//
//dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'org.postgresql:postgresql'
//    annotationProcessor 'org.projectlombok:lombok'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
//    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//
//    implementation 'org.flywaydb:flyway-database-postgresql'
//    implementation 'org.flywaydb:flyway-core:latest.release'
//
//
//    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
//
//
//    // test
//
////    testImplementation 'org.mockito:mockito-core'
////    testImplementation 'org.mockito:mockito-junit-jupiter'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//
//}
//
//tasks.named('test') {
//    useJUnitPlatform()
//}

// updates version

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'User-Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.flywaydb:flyway-core:latest.release'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.h2database:h2'
}

// Test Configuration - Improved for reliability
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Prevent hanging tests
    timeout = Duration.ofMinutes(5)

    // Better performance settings
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    // JVM settings
    minHeapSize = "256m"
    maxHeapSize = "1g"
    jvmArgs = [
            '-XX:MaxMetaspaceSize=256m',
            '-XX:+UseG1GC',
            '-Djava.awt.headless=true'
    ]

    // Generate XML reports for SonarQube
    reports {
        junitXml.required = true
        html.required = true
    }

    // Test logging for debugging
    testLogging {
        events "started", "passed", "skipped", "failed"
        exceptionFormat "short"
        showStandardStreams = false
        showStackTraces = true
    }

    // Set system properties for tests
    systemProperties = [
            'spring.profiles.active': 'test',
            'logging.level.org.springframework.security': 'WARN',  // Reduced logging
            'logging.level.org.flywaydb': 'WARN',
            'spring.test.context.cache.maxSize': '1'
    ]
}

// Jacoco Configuration for Code Coverage
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Configure XML report location for SonarQube
    reports {
        xml {
            required = true
            outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
        }
        html {
            required = true
            outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
        }
    }

    // Only run coverage verification in CI or when explicitly requested
    if (!project.hasProperty('skipCoverageVerification')) {
        finalizedBy jacocoTestCoverageVerification
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.30 // 30% overall coverage (more realistic for new projects)
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.20 // 20% branch coverage (more realistic)
            }

            // Exclude infrastructure classes from strict coverage requirements
            excludes = [
                    'com.example.userservice.security.jwt.*',
                    'com.example.userservice.configuration.*',
                    'com.example.userservice.*Application',
                    'com.example.userservice.config.*'
            ]
        }
    }
}

// SonarQube Configuration - Enhanced with built-in quality rules
sonarqube {
    properties {
        // Basic project information
        property "sonar.projectKey", "user-service"
        property "sonar.projectName", "User Service"
        property "sonar.projectVersion", project.version
        property "sonar.organization", "godfrey10"

        // Source and test directories
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"

        // Coverage and test reports
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"

        // Source encoding
        property "sonar.sourceEncoding", "UTF-8"

        // Java version
        property "sonar.java.source", "17"
        property "sonar.java.target", "17"

        // Quality gate
        property "sonar.qualitygate.wait", "true"

        // Exclude patterns
        property "sonar.exclusions", [
                "**/generated/**",
                "**/target/**",
                "**/build/**",
                "**/*Application.java",
                "**/*Config.java",
                "**/*Configuration.java"
        ].join(",")

        // Test exclusions
        property "sonar.test.exclusions", [
                "**/test/**",
                "**/*Test.java",
                "**/*Tests.java"
        ].join(",")

        // Coverage exclusions
        property "sonar.coverage.exclusions", [
                "**/dto/**",
                "**/entity/**",
                "**/config/**",
                "**/*Application.java",
                "**/*Config.java",
                "**/*Configuration.java"
        ].join(",")

        // Duplication exclusions
        property "sonar.cpd.exclusions", [
                "**/dto/**",
                "**/entity/**"
        ].join(",")
    }
}

// Custom task for integration tests
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform {
        includeTags 'integration'
    }

    reports {
        junitXml.required = true
        html.required = true
    }

    finalizedBy jacocoTestReport
}

// Task to run all quality checks (simplified)
task qualityCheck {
    description = 'Runs all quality checks including tests and coverage'
    group = 'verification'
    dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
}

// Quick build task without quality checks
task fastBuild {
    description = 'Fast build for development - skips tests'
    group = 'build'
    dependsOn compileJava, compileTestJava, bootJar
}

// Build with tests but skip coverage verification
task buildWithTests {
    description = 'Build with tests but without strict coverage verification'
    group = 'build'
    dependsOn compileJava, test, bootJar
}

// Generate coverage report without verification
task coverageReport {
    description = 'Generate coverage report without verification'
    group = 'reporting'
    dependsOn test

    doLast {
        tasks.jacocoTestReport.execute()
    }
}

// Build lifecycle hooks
check.dependsOn integrationTest

// Ensure SonarQube runs after all quality checks
tasks.sonarqube.dependsOn qualityCheck

// Print build info
gradle.buildFinished { buildResult ->
    println ""
    println "=================="
    println "BUILD COMPLETED"
    println "=================="
    if (buildResult.failure) {
        println "❌ Build failed: ${buildResult.failure.message}"
    } else {
        println "✅ Build successful!"
        println "📊 Reports available:"
        println "   - Test results: build/reports/tests/test/index.html"
        println "   - Integration tests: build/reports/tests/integrationTest/index.html"
        println "   - Code coverage: build/reports/jacoco/test/html/index.html"
        println ""
        println "🚀 Quality Commands:"
        println "   - Run quality checks: ./gradlew qualityCheck"
        println "   - Run SonarQube analysis: ./gradlew sonarqube"
        println "   - Generate coverage: ./gradlew jacocoTestReport"
        println "   - Fast build (no tests): ./gradlew fastBuild"
    }
    println "=================="
}

// Task dependencies for proper execution order
jacocoTestReport {
    mustRunAfter test
}

tasks.sonarqube {
    mustRunAfter test, jacocoTestReport
}
