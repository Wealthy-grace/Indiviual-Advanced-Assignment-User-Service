plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'User-Service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.flywaydb:flyway-core:latest.release'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Database for tests - Keep H2 for local development
    testImplementation 'com.h2database:h2'

    // Additional test libraries
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
}

// FIXED: Environment-aware test configuration
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Check if running in CI environment
    def isCI = System.getenv("CI") == "true" ||
            System.getenv("GITHUB_ACTIONS") == "true" ||
            System.getenv("SPRING_DATASOURCE_URL") != null

    // Memory and performance settings
    timeout = Duration.ofMinutes(10)
    maxParallelForks = 1
    minHeapSize = "512m"
    maxHeapSize = "2g"

    jvmArgs = [
            '-XX:MaxMetaspaceSize=512m',
            '-XX:+UseG1GC',
            '-Djava.awt.headless=true',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.util=ALL-UNNAMED'
    ]

    reports {
        junitXml.required = true
        html.required = true
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        displayGranularity = 2
    }

    // FIXED: Conditional system properties based on environment
    if (isCI) {
        // CI Environment: Use environment variables (PostgreSQL)
        // Don't override database connection properties
        systemProperties = [
                'spring.profiles.active': 'test',
                'spring.jpa.show-sql': 'false',
                'logging.level.org.springframework.security': 'WARN',
                'logging.level.org.flywaydb': 'WARN',
                'logging.level.org.hibernate.SQL': 'WARN',
                'logging.level.org.hibernate.type.descriptor.sql.BasicBinder': 'WARN',
                'spring.test.context.cache.maxSize': '3',
                'junit.jupiter.execution.parallel.enabled': 'false'
        ]
        println "Running tests in CI mode - using environment database configuration"
    } else {
        // Local Development: Use H2 in-memory database
        systemProperties = [
                'spring.profiles.active': 'test',
                'spring.datasource.url': 'jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE',
                'spring.datasource.driver-class-name': 'org.h2.Driver',
                'spring.datasource.username': 'sa',
                'spring.datasource.password': '',
                'spring.jpa.database-platform': 'org.hibernate.dialect.H2Dialect',
                'spring.jpa.hibernate.ddl-auto': 'create-drop',
                'spring.jpa.show-sql': 'false',
                'spring.flyway.enabled': 'false',
                'logging.level.org.springframework.security': 'WARN',
                'logging.level.org.flywaydb': 'WARN',
                'logging.level.org.hibernate.SQL': 'WARN',
                'logging.level.org.hibernate.type.descriptor.sql.BasicBinder': 'WARN',
                'spring.test.context.cache.maxSize': '3',
                'junit.jupiter.execution.parallel.enabled': 'false'
        ]
        println "Running tests in local mode - using H2 in-memory database"
    }

    failFast = false
}

// Jacoco configuration
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Application*',
                    '**/config/**',
                    '**/configuration/**',
                    '**/dto/**',
                    '**/entity/**',
                    '**/security/jwt/**'
            ])
        }))
    }
}

// Coverage verification - More lenient during development
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.20
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.15
            }
            excludes = [
                    'com.example.userservice.security.jwt.*',
                    'com.example.userservice.configuration.*',
                    'com.example.userservice.*Application',
                    'com.example.userservice.config.*',
                    'com.example.userservice.dto.*',
                    'com.example.userservice.entity.*'
            ]
        }
    }
}

// Integration tests
task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform {
        includeTags 'integration'
        excludeTags 'unit'
    }
    reports {
        junitXml.required = true
        html.required = true
    }
    finalizedBy jacocoTestReport

    minHeapSize = "512m"
    maxHeapSize = "2g"
    maxParallelForks = 1
}

// Development tasks
task fastBuild {
    description = 'Fast build for development - skips tests'
    group = 'build'
    dependsOn compileJava, compileTestJava, bootJar
}

task buildWithTests {
    description = 'Build with tests but without strict coverage verification'
    group = 'build'
    dependsOn compileJava, test, bootJar
}

task testOnly {
    description = 'Run tests only with detailed output'
    group = 'verification'
    dependsOn test
}

task qualityCheck {
    description = 'Runs all quality checks'
    group = 'verification'
    dependsOn test, jacocoTestReport
}

task coverageReport {
    description = 'Generate coverage report without verification'
    group = 'reporting'
    dependsOn test
    doLast { tasks.jacocoTestReport.execute() }
}

// FIXED: SonarQube configuration - use environment variables for tokens
sonarqube {
    properties {
        property "sonar.projectKey", "user-service"
        property "sonar.projectName", "User Service"
        property "sonar.organization", "godfrey10"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL") ?: "http://localhost:9000"
        property "sonar.token", System.getenv("SONAR_TOKEN") ?: ""
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.source", "17"
        property "sonar.java.target", "17"
        property "sonar.qualitygate.wait", "false"
    }
}

tasks.named('sonarqube') {
    mustRunAfter test, jacocoTestReport
}

task fullQualityCheck {
    description = 'Runs all tests, coverage, integration tests, and SonarQube analysis'
    group = 'verification'
    dependsOn qualityCheck, jacocoTestReport, tasks.named('sonarqube')
}