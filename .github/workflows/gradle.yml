name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pull-requests: read # for SonarQube

env:
  IMAGE_NAME: godfrey10/user-service
  JAVA_VERSION: 17
  POSTGRES_DB: user-service
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Server123@

jobs:
  # -----------------------------
  # 1. Build and Test
  # -----------------------------
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: user-service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d user-service"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarQube

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Verify Gradle wrapper exists
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "Error: gradlew not found"
            exit 1
          fi
          echo "Gradle wrapper found and validated"

      - name: Run tests with coverage
        run: ./gradlew clean test jacocoTestReport --no-daemon --stacktrace
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/user-service
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@

      - name: Build application
        run: ./gradlew bootJar -x test --no-daemon --stacktrace

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: test-results-${{ github.run_number }}
          path: |
            build/test-results/test/
            build/reports/jacoco/test/
            build/reports/tests/test/
          retention-days: 7

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts-${{ github.run_number }}
          path: build/libs/*.jar
          retention-days: 7

  # -----------------------------
  # 2. Code Quality Analysis - Local SonarQube
  # -----------------------------
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'  # Skip for dependabot PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarQube blame and history

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: build/

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Set required kernel parameters for SonarQube
      - name: Configure system for SonarQube
        run: |
          # Set vm.max_map_count for Elasticsearch (required by SonarQube)
          echo "Setting kernel parameters for SonarQube..."
          sudo sysctl -w vm.max_map_count=524288
          sudo sysctl -w fs.file-max=131072
          
          # Verify settings
          echo "vm.max_map_count: $(sysctl vm.max_map_count)"
          echo "fs.file-max: $(sysctl fs.file-max)"

      # Create CI-specific docker-compose override
      - name: Create CI docker-compose override
        run: |
          cat > docker-compose.ci.yml << 'EOF'
          services:
            sonarqube:
              # Remove sysctls for CI environment
              environment:
                SONAR_JDBC_URL: jdbc:postgresql://sonarqube-postgres:5432/sonarqube
                SONAR_JDBC_USERNAME: sonar
                SONAR_JDBC_PASSWORD: sonar123
                SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
                SONAR_WEB_JAVAADDITIONALOPTS: "-Xmx512m -Xms128m"
                SONAR_CE_JAVAADDITIONALOPTS: "-Xmx512m -Xms128m"
          EOF

      # Start your Docker Compose services for testing
      - name: Start Docker Compose Services
        run: |
          echo "Starting Docker Compose services..."
          # Use Docker Compose V2 plugin with CI override
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d postgres-service sonarqube-postgres sonarqube
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout 120s bash -c '
            until docker exec user-service-postgres pg_isready -U postgres -d user-service; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
          '
          echo "PostgreSQL is ready!"

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be ready..."
          timeout 300s bash -c '
            until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do
              echo "Waiting for SonarQube to start..."
              sleep 10
            done
          '
          echo "SonarQube is ready!"
          
          # Verify SonarQube health
          curl -s http://localhost:9000/api/system/health | grep -q "GREEN\|YELLOW" && echo "SonarQube health check passed"

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: sqp_0c7316a589d409ca73718877bf2bf8a7e4e92a86
        run: |
          echo "Running SonarQube analysis..."
          
          ./gradlew sonar \
            -Dsonar.projectKey=user-service \
            -Dsonar.projectName='User Service' \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token="$SONAR_TOKEN" \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.junit.reportPaths=build/test-results/test \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            --no-daemon --stacktrace
          
          echo "SonarQube analysis completed!"
          echo "View results at: http://localhost:9000/dashboard?id=user-service"

      - name: Cleanup Docker Services
        if: always()  # Always cleanup, even if previous steps fail
        run: |
          echo "Cleaning up Docker Compose services..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down --volumes --remove-orphans || true

  # -----------------------------
  # 3. Security Scanning
  # -----------------------------
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # -----------------------------
  # 4. Docker Build & Push
  # -----------------------------
  build-docker:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: godfrey10
          password: godfreygrace10

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: godfrey10/user-service
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}

      # Use your multi-stage Dockerfile (the one from your setup)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------
  # 5. Deploy to Staging
  # -----------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be a webhook call, SSH deployment, etc.

  # -----------------------------
  # 6. Deploy to Production
  # -----------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production using Docker Compose..."
          
          # Pull the latest image that was just built
          docker pull godfrey10/user-service:latest
          
          # Update the docker-compose file to use the new image
          # Start the production services (excluding development tools)
          docker compose -f docker-compose.yml up -d postgres-service user-service
          
          echo "Production deployment completed!"

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          
          # Wait for PostgreSQL
          timeout 120s bash -c '
            until docker exec user-service-postgres pg_isready -U postgres -d user-service; do
              echo "Waiting for PostgreSQL..."
              sleep 5
            done
          '
          echo "PostgreSQL is ready!"
          
          # Wait for User Service
          timeout 180s bash -c '
            until curl -f http://localhost:8081/actuator/health; do
              echo "Waiting for User Service to be healthy..."
              sleep 10
            done
          '
          echo "User Service is ready!"

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          
          # Check container status
          docker compose ps
          
          # Check service health
          echo "=== Service Health Check ==="
          curl -s http://localhost:8081/actuator/health | jq '.' || curl -s http://localhost:8081/actuator/health
          
          # Check service info
          echo "=== Service Info ==="
          curl -s http://localhost:8081/actuator/info | jq '.' || curl -s http://localhost:8081/actuator/info
          
          # Check container logs (last 20 lines)
          echo "=== Recent Logs ==="
          docker logs user-service-app --tail 20
          
          echo "✅ Production deployment verification completed!"

      - name: Cleanup old images
        run: |
          echo "Cleaning up old Docker images..."
          docker image prune -f
          docker system prune -f --volumes
          echo "Cleanup completed!"

      - name: Notify deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful!"
          else
            echo "❌ Production deployment failed!"
          fi

  # -----------------------------
  # 7. Post-deployment tests
  # -----------------------------
  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          
          # Basic health check
          curl -f http://localhost:8081/actuator/health
          
          # Add more smoke tests here
          echo "All smoke tests passed!"