name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pull-requests: read
  security-events: write
  checks: write
  actions: read
  statuses: write

env:
  IMAGE_NAME: godfrey10/user-service
  JAVA_VERSION: 17
  POSTGRES_DB: user-service
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Server123@

jobs:
  # -----------------------------
  # 1. Build and Test
  # -----------------------------
  build-and-test:
    name: Run Tests and Code Analysis
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: user-service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests with coverage
        run: ./gradlew clean test jacocoTestReport --no-daemon --continue
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/user-service
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          SPRING_FLYWAY_ENABLED: true

      - name: Build application
        run: ./gradlew bootJar -x test --no-daemon

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/test-results/test/
            build/reports/jacoco/test/
            build/reports/tests/test/
          retention-days: 7

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar
          retention-days: 7

  # -----------------------------
  # 2. SonarCloud Analysis
  # -----------------------------
  code-quality-sonarqube:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew build jacocoTestReport sonar \
            -Dsonar.projectKey=Wealthy-grace_Individual-Advanced-Assignment-User-Service \
            -Dsonar.organization=wealthy-grace \
            -Dsonar.host.url=https://sonarcloud.io \
            --info \
            --no-daemon
        continue-on-error: true

  # -----------------------------
  # 3. Security Scanning
  # -----------------------------
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # -----------------------------
  # 4. Docker Build & Push
  # -----------------------------
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality-sonarqube]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Application
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------
  # 5. Deploy to Staging
  # -----------------------------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

      - name: Run Health Check
        run: |
          echo "Running health check..."
          # Add health check commands here

  # -----------------------------
  # 6. Deploy to Production
  # -----------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Run Health Check
        run: |
          echo "Running health check..."
          # Add health check commands here

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          # Add notification logic here (Slack, email, etc.)
