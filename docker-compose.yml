services:
  # PostgreSQL Database
  postgres-service:
    image: postgres:15-alpine
    container_name: user-service-postgres
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Server123@
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user-service"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SonarQube PostgreSQL Database
  sonarqube-postgres:
    image: postgres:15-alpine
    container_name: sonarqube-postgres
    environment:
      POSTGRES_DB: sonarqube
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar123
    volumes:
      - sonarqube_postgres_data:/var/lib/postgresql/data
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonarqube"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SonarQube Server (CI/CD optimized)
  sonarqube:
    image: sonarqube:10.7.0-community
    container_name: sonarqube-server
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar123
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      # Disable some checks for CI environment
      SONAR_WEB_JAVAADDITIONALOPTS: "-Xmx512m -Xms128m"
      SONAR_CE_JAVAADDITIONALOPTS: "-Xmx512m -Xms128m"
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      sonarqube-postgres:
        condition: service_healthy
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    # Remove sysctls - these will be set at host level in CI
    # sysctls:
    #   - vm.max_map_count=524288

  # User Service Application
  user-service:
    image: godfrey10/user-service:latest
    container_name: user-service-app
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/user-service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Server123@
      SPRING_APPLICATION_NAME: User-Service
      SERVER_PORT: 8081
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      SPRING_FLYWAY_BASELINE_VERSION: 1.0
      SPRING_FLYWAY_OUT_OF_ORDER: true
      SPRING_FLYWAY_VALIDATE_ON_MIGRATE: true
      SPRING_APP_JWT_SECRET: mySecretKey123912738aopsgjnspkmndfsopkvajoirjg94gf2opfng2moknm
      SPRING_APP_JWT_EXPIRATION_MS: 3000000
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: INFO
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG
      LOGGING_LEVEL_ORG_FLYWAYDB_CORE: INFO
      LOGGING_LEVEL_COM_EXAMPLE_SPRINGSECURITYDEMO2025: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
    ports:
      - "8081:8081"
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  sonarqube_postgres_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local

networks:
  user-service-network:
    driver: bridge