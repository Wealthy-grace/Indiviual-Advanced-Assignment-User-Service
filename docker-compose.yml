#version: '3.8'
#
#services:
#  # PostgreSQL Database
#  postgres-service:
#    image: postgres:15-alpine
#    container_name: user-service-postgres
#    environment:
#      POSTGRES_DB: user-service
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: Server123@
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./init-scripts:/docker-entrypoint-initdb.d/
#    networks:
#      - user-service-network
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres -d user-service"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 60s
#
#  # User Service Application
#  user-service:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: user-service-app
#    environment:
#      # Database configuration for Docker environment
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/user-service
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: Server123@
#
#      # Application configuration
#      SPRING_APPLICATION_NAME: User-Service
#      SERVER_PORT: 8081
#
#      # JPA/Hibernate configuration
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
#
#      # Flyway configuration
#      SPRING_FLYWAY_ENABLED: true
#      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
#      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
#      SPRING_FLYWAY_BASELINE_VERSION: 1.0
#      SPRING_FLYWAY_OUT_OF_ORDER: true
#      SPRING_FLYWAY_VALIDATE_ON_MIGRATE: true
#
#      # JWT Configuration
#      SPRING_APP_JWT_SECRET: mySecretKey123912738aopsgjnspkmndfsopkvajoirjg94gf2opfng2moknm
#      SPRING_APP_JWT_EXPIRATION_MS: 3000000
#
#      # Logging configuration
#      LOGGING_LEVEL_ROOT: INFO
#      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: INFO
#      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG
#      LOGGING_LEVEL_ORG_FLYWAYDB_CORE: INFO
#      LOGGING_LEVEL_COM_EXAMPLE_SPRINGSECURITYDEMO2025: DEBUG
#      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
#
#      # Actuator configuration
#      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
#      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
#    ports:
#      - "8081:8081"
#    depends_on:
#      postgres-service:
#        condition: service_healthy
#    networks:
#      - user-service-network
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 120s
#    restart: unless-stopped
#
#  # pgAdmin for database management (optional)
#  pgadmin:
#    image: dpage/pgadmin4:latest
#    container_name: user-service-pgadmin
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@example.com
#      PGADMIN_DEFAULT_PASSWORD: admin123
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    ports:
#      - "5050:80"
#    depends_on:
#      - postgres-service
#    networks:
#      - user-service-network
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#    profiles:
#      - tools
#
#volumes:
#  postgres_data:
#    driver: local
#  pgadmin_data:
#    driver: local
#
#networks:
#  user-service-network:
#    driver: bridge



# updated docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database
  postgres-service:
    image: postgres:15-alpine
    container_name: user-service-postgres
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Server123@
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user-service"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # User Service Application
  user-service:
    image: godfrey10/user-service:latest  # use CI/CD pushed image
    container_name: user-service-app
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-service:5432/user-service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Server123@

      SPRING_APPLICATION_NAME: User-Service
      SERVER_PORT: 8081

      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect

      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      SPRING_FLYWAY_BASELINE_VERSION: 1.0
      SPRING_FLYWAY_OUT_OF_ORDER: true
      SPRING_FLYWAY_VALIDATE_ON_MIGRATE: true

      SPRING_APP_JWT_SECRET: mySecretKey123912738aopsgjnspkmndfsopkvajoirjg94gf2opfng2moknm
      SPRING_APP_JWT_EXPIRATION_MS: 3000000

      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: INFO
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: DEBUG
      LOGGING_LEVEL_ORG_FLYWAYDB_CORE: INFO
      LOGGING_LEVEL_COM_EXAMPLE_SPRINGSECURITYDEMO2025: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG

      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
    ports:
      - "8081:8081"
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - user-service-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: user-service-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres-service
    networks:
      - user-service-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  user-service-network:
    driver: bridge
