name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: user-service
  DOCKERHUB_USERNAME: godfrey10
  JAVA_VERSION: 17
  POSTGRES_DB: user-service
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Server123@

jobs:
  # -----------------------------
  # 1. Build and Test
  # -----------------------------
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d ${{ env.POSTGRES_DB }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Unit Tests
        run: ./gradlew test --no-daemon --info
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: Run Integration Tests
        run: ./gradlew integrationTest --no-daemon || echo "No integration tests found"
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: Build Application
        run: ./gradlew bootJar -x test --no-daemon

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts-${{ github.run_number }}
          path: build/libs/*.jar
          retention-days: 1

  # -----------------------------
  # 2. Docker Build & Push
  # -----------------------------
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts-${{ github.run_number }}
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.simple
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/user-service:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------
  # 3. Deploy using Docker Compose
  # -----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-docker@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull latest images
        run: docker-compose -f docker-compose.yml pull

      - name: Deploy containers
        run: docker-compose -f docker-compose.yml up -d --remove-orphans

      - name: Verify deployment
        run: |
          docker ps
          docker logs user-service-app --tail 20
