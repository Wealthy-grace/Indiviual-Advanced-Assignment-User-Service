name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: godfrey10/user-service
  JAVA_VERSION: 17
  POSTGRES_DB: user-service
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Server123@

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: user-service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d user-service"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Build, Test, Coverage & SonarQube
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/user-service
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew clean build jacocoTestReport sonarqube \
            --no-daemon --parallel --info

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.simple
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production (Main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker stop userservice-prod 2>/dev/null || true
          docker rm userservice-prod 2>/dev/null || true
          docker run -d --name userservice-prod \
            -p 8081:8081 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/user-service \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=Server123@ \
            ${{ env.IMAGE_NAME }}:latest
          docker logs userservice-prod --tail 20
